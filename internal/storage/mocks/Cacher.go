// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	entity "github.com/dobb2/zenTotem/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Cacher is an autogenerated mock type for the Cacher type
type Cacher struct {
	mock.Mock
}

// Increment provides a mock function with given fields: element
func (_m *Cacher) Increment(element entity.Element) (entity.Element, error) {
	ret := _m.Called(element)

	var r0 entity.Element
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Element) (entity.Element, error)); ok {
		return rf(element)
	}
	if rf, ok := ret.Get(0).(func(entity.Element) entity.Element); ok {
		r0 = rf(element)
	} else {
		r0 = ret.Get(0).(entity.Element)
	}

	if rf, ok := ret.Get(1).(func(entity.Element) error); ok {
		r1 = rf(element)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCacher interface {
	mock.TestingT
	Cleanup(func())
}

// NewCacher creates a new instance of Cacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCacher(t mockConstructorTestingTNewCacher) *Cacher {
	mock := &Cacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
